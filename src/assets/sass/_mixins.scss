// Adding dimensions
@mixin box($width, $height) {
  width: $width;
  height: $height;
}

// Clearfix
@mixin clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

// Opacity
@mixin opacity($opacity) {
  opacity: $opacity;
  $opacity-ie: $opacity * 100;
  filter: alpha(opacity = $opacity-ie); //IE8
}

// Positioning
@mixin position($position, $args) {
  @each $o in top right bottom left {
    $i: index($args, $o);
    @if $i and $i + 1 <= length($args) and type-of(nth($args, $i + 1)) == number {
      #{$o}: nth($args, $i + 1);
    }
  }
  position: $position;
}

// Rem units
@mixin font-size($size, $base: 16) {
  font-size: $size; // fallback for old browsers
  font-size: ($size / $base) * 1rem;
}

// Vendor prefixing
@mixin prefix($property, $value, $vendors: webkit moz ms o, $default: true) {
  @if $vendors {
    @each $vendor in $vendors {
      #{"-" + $vendor + "-" + $property}: #{$value};
    }
  }
  @if $default {
    #{$property}: #{$value};
  }
}

// Media queries
@mixin screen($size) {
  $tablet-width: 768px;
  $desktop-width: 1112px;
  @if $size == 'desktop' {
    @media (min-width: #{$desktop-width}) {
      @content;
    }
  }
  @else if $size == 'desktop, tablet' {
    @media (min-width: #{$tablet-width}) {
      @content;
    }
  }
  @else if $size == 'tablet' {
    @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {
      @content;
    }
  }
  @else if $size == 'tablet, mobile' {
    @media (max-width: #{$desktop-width - 1px}) {
      @content;
    }
  }
  @else if $size == 'mobile' {
    @media (max-width: #{$tablet-width - 1px}) {
      @content;
    }
  }
  @else {
    @media only screen and (max-width: #{$size}) {
      @content;
    }
  }
}

// CSS3 Keyframes
@mixin keyframes($name) {
  @-webkit-keyframes #{$name} {
    @content;
  }

  @-moz-keyframes #{$name} {
    @content;
  }

  @keyframes #{$name} {
    @content;
  }
}

// Background Gradient
@mixin gradient($start-color, $end-color, $orientation) {
  background: $start-color;
  @if $orientation == 'vertical' {
    background: -webkit-linear-gradient(top, $start-color, $end-color);
    background: linear-gradient(to bottom, $start-color, $end-color);
  } @else if $orientation == 'horizontal' {
    background: -webkit-linear-gradient(left, $start-color, $end-color);
    background: linear-gradient(to right, $start-color, $end-color);
  } @else {
    background: -webkit-radial-gradient(center, ellipse cover, $start-color, $end-color);
    background: radial-gradient(ellipse at center, $start-color, $end-color);
  }
}

// @font-face
@mixin font-face($font-name, $file-name, $weight: normal, $style: normal) {
  @font-face {
    font-family: quote($font-name);
    src: url($file-name + '.woff') format('woff'), url($file-name + '.woff2')  format('woff2');
    font-weight: $weight;
    font-style: $style;
    -webkit-font-smoothing: antialiased;
  }
}

// Centering a block
@mixin center-block {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

// Vertical centering
@mixin center-vertically {
  position: absolute;
  top: 50%;
  left: 50%;
  @include prefix(transform, translate(-50%, -50%), 'webkit' 'ms');
}

// Pixelated
@mixin pixelated {
  -ms-interpolation-mode: nearest-neighbor; // IE 7+ (non-standard property)
  image-rendering: -webkit-optimize-contrast; // Safari 6, UC Browser 9.9
  image-rendering: -webkit-crisp-edges; // Safari 7+
  image-rendering: -moz-crisp-edges; // Firefox 3.6+
  image-rendering: -o-crisp-edges; // Opera 12
  image-rendering: pixelated; // Chrome 41+ and Opera 26+
}